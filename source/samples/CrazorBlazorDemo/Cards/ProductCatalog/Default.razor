@using CrazorBlazorDemo.Cards.ProductCatalog
@using System.Text;
@using System.Net.Http;
@using Microsoft.Bot.Schema
@using Newtonsoft.Json;

@inherits CardView<ProductCatalogApp>


<Card Version="1.5">
    <TextBlock Size="AdaptiveTextSize.ExtraLarge" Weight="AdaptiveTextWeight.Bolder">Product Catalog</TextBlock>

    @if (CatalogItems.Any())
    {
        @foreach (var item in CatalogItems)
        {
            <Container Separator="true">
                <ColumnSet Spacing="AdaptiveSpacing.None">
                    <Column Width="stretch">
                        <TextBlock Size="AdaptiveTextSize.Large" Weight="AdaptiveTextWeight.Bolder">@item.Name</TextBlock>
                        <TextBlock Size="AdaptiveTextSize.Medium">@item.Description</TextBlock>
                        <TextBlock Size="AdaptiveTextSize.Medium">Price: $@item.Price</TextBlock>
                        <Image Url="@item.PictureUri" />
                    </Column>
                    <Column Width="auto">
                        <Image Url="https://cdn.icon-icons.com/icons2/3399/PNG/512/detail_icon_215012.png" Size="AdaptiveImageSize.Small">
                            <SelectAction>
                                <ActionExecute Tooltip="Detail" Verb="@nameof(OnDetail)">
                                    {"id":"@item.Id"}
                                </ActionExecute>
                            </SelectAction>
                        </Image>
                    </Column>
                    <Column Width="auto">
                        <Image Url="https://cdn.icon-icons.com/icons2/931/PNG/512/edit_modify_icon-icons.com_72390.png" Size="AdaptiveImageSize.Small">
                            <SelectAction>
                                <ActionExecute Tooltip="Edit" Verb="@nameof(OnEdit)">
                                    {"id":"@item.Id"}
                                </ActionExecute>
                            </SelectAction>
                        </Image>
                    </Column>
                    <Column Width="auto">
                        <Image Url="https://cdn.icon-icons.com/icons2/3251/PNG/512/delete_regular_icon_203689.png" Size="AdaptiveImageSize.Small">
                            <SelectAction>
                                <ActionExecute Tooltip="Delete" Verb="@nameof(OnDelete)">
                                    {"id":"@item.Id"}
                                </ActionExecute>
                            </SelectAction>
                        </Image>
                    </Column>
                </ColumnSet>
            </Container>
        }
    }

    <ActionExecute Title="Add Product Item" Verb="@nameof(OnAdd)" />
</Card>

@code {

    public List<ProductCatalogItem> CatalogItems { get; set; }

    public async Task OnShowView(CancellationToken cancellationToken)
    {
        CatalogItems = await App.GetCatalogItems(cancellationToken);
    }

    public override async Task OnResumeView(CardResult cardResult, CancellationToken cancellationToken)
    {
        if (cardResult.Success)
        {
            if (cardResult.Name == "EditOrAdd")
            {
                var model = cardResult.AsResult<EditOrAddProductCatalogItem>()!;
                if (model.IsEdit)
                {
                    await App.UpdateCatalogItem(model.Item, cancellationToken);
                    AddBannerMessage("Catalog Item successfully updated!", AdaptiveContainerStyle.Good);
                }
                else
                {
                    await App.AddCatalogItem(model.Item, cancellationToken);
                    AddBannerMessage("Catalog Item successfully added!", AdaptiveContainerStyle.Good);
                }
            }
        }
        CatalogItems = await App.GetCatalogItems(cancellationToken);
    }

    public void OnAdd()
    {
        var item = new ProductCatalogItem();
        ShowView("EditOrAdd", new EditOrAddProductCatalogItem() { IsEdit = false, Item = item });
    }

    public async Task OnDetail(string id, CancellationToken cancellationToken)
    {
        var item = await App.GetCatalogItem(id, cancellationToken);
        if (item != null)
        {
            ShowView("Detail", item);
        }
    }

    public async Task OnEdit(string id, CancellationToken cancellationToken)
    {
        var item = await App.GetCatalogItem(id, cancellationToken);
        if (item != null)
        {
            ShowView("EditOrAdd", new EditOrAddProductCatalogItem() { IsEdit = true, Item = item });
        }
    }

    public async Task OnDelete(string id, CancellationToken cancellationToken)
    {
        await App.DeleteCatalogItem(id, cancellationToken);
        CatalogItems = await App.GetCatalogItems(cancellationToken);
    }
}
