@using Microsoft.Bing.WebSearch
@using Microsoft.Bing.WebSearch.Models
@using Microsoft.Extensions.Configuration
@using OpBot.Cards.BingSearch
@inherits CardView<DefaultModel>

<Card xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Version="1.5">
    <TextBlock Size="ExtraLarge" Weight="Bolder">Bing Search</TextBlock>
    <ColumnSet>
        <Column Width="stretch">
            <Input.Text Id="Query" Value="@Query" />
        </Column>
        <Column Width="auto">
            <ActionSet>
                <Action.Execute Title="Search" Verb="OnSearch" />
            </ActionSet>
        </Column>
    </ColumnSet>
    if (Results != null)
    {
    @foreach (var result in Model.Results)
    {
        <Container Separator="true">
            <ColumnSet>
                <Column Width="stretch">
                    <TextBlock Weight="Bolder">[@result.Name](@result.DisplayUrl)</TextBlock>
                    <TextBlock Spacing="None">[@result.DisplayUrl](@result.DisplayUrl)</TextBlock>
                    <TextBlock Spacing="Small">@result.Snippet</TextBlock>
                </Column>
                <Column Width="auto">
                    @if (!String.IsNullOrEmpty(result.ThumbnailUrl))
                    {
                        <Image Url="@result.ThumbnailUrl" Size="Large" />
                    }
                </Column>
            </ColumnSet>
        </Container>
    }
    }
    <ColumnSet>
        <Column Width="auto">
            @if (Model.HasPrev)
            {
                <ActionSet>
                    <Action.Execute Title="&lt;" Verb="OnPrevious" />
                </ActionSet>
            }
        </Column>
        <Column Width="stretch" />
        <Column Width="auto">
            @if (Model.HasNext)
            {
                <ActionSet>
                    <Action.Execute Title="&gt;" Verb="OnNext" />
                </ActionSet>
            }
        </Column>
    </ColumnSet>
</Card>

@functions {
    public const int PageSize = 5;

    [BindProperty]
    [Required]
    [StringLength(100)]
    public string? Query { get; set; }

    public async Task OnSearchAsync()
    {
        if (!String.IsNullOrWhiteSpace(Query))
        {
            var configuration = (IConfiguration)ViewContext.HttpContext.RequestServices.GetService(typeof(IConfiguration))!;
            var apiKey = configuration.GetValue<string>("BingKey");
            var search = new WebSearchClient(new ApiKeyServiceClientCredentials(apiKey));

            var searchResult = await search.Web.SearchAsync(query: Query, count: PageSize, offset: Model.Offset);

            Model.Results = searchResult.WebPages.Value!;
        }
    }

    public async Task OnNextAsync()
    {
        Model.Offset += PageSize;
        await OnSearchAsync();
    }

    public async Task OnPreviousAsync()
    {
        if (Model.Offset != 0)
            Model.Offset -= PageSize;
        await OnSearchAsync();
    }
}
