@using OpBot.Cards.Address
@inherits CardView<AddressApp>

<Card xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Version="1.5">


    <TextBlock Size="ExtraLarge">Addresses</TextBlock>
    @if (App.Addresses.Any())
    {
        @foreach (var address in App.Addresses)
        {
            <Container Separator="true">
                <ColumnSet Padding="none">
                    <Column Width="stretch">
                        <TextBlock>@address.Street</TextBlock>
                        <TextBlock>@address.City, @address.State @address.PostalCode @address.Country</TextBlock>
                    </Column>
                    <Column Width="auto">
                        <Image Url="https://icons.iconarchive.com/icons/icons8/windows-8/72/Files-Edit-File-icon.png" Size="Small">
                            <SelectAction>
                                <Action.Execute Tooltip="Edit Address" Verb="OnEdit">
                                    { "resourceId":"@address.Id" }
                                </Action.Execute>
                            </SelectAction>
                        </Image>
                    </Column>
                    <Column Width="auto">
                        <Image Url="https://icons.iconarchive.com/icons/icons8/windows-8/72/Files-Delete-File-icon.png" Size="Small">
                            <SelectAction>
                                <Action.Execute Tooltip="Delete Address" Verb="OnDelete">
                                    { "resourceId":"@address.Id" }
                                </Action.Execute>
                            </SelectAction>
                        </Image>
                    </Column>
                </ColumnSet>
            </Container>
        }
    }
    else
    {
        <TextBlock>No addresses.</TextBlock>
    }
    <Action.Execute Title="Add Address" Verb="OnAdd" />
</Card>

@functions {

    public void OnAdd()
    {
        var address = new Address();
        ShowCard("Edit", new EditAddressModel() { IsEdit = false, Address = address });
    }

    public void OnEdit(string resourceId)
    {
        var address = App.Addresses.SingleOrDefault(a => a.Id == resourceId);
        if (address != null)
        {
            ShowCard("Edit", new EditAddressModel() { IsEdit = true, Address = address });
        }
    }

    public void OnDelete(string resourceId)
    {
        App.Addresses = App.Addresses.Where(a => a.Id != resourceId).ToList();
    }

    public void OnEditCompleted(EditAddressModel editAddress)
    {
        ArgumentNullException.ThrowIfNull(editAddress.Address);
        if (editAddress.IsEdit)
        {
            var address = App.Addresses.Where(a => a.Id == editAddress.Address.Id).SingleOrDefault();
            if (address != null)
            {
                address.Street = editAddress.Address.Street;
                address.City = editAddress.Address.City;
                address.State = editAddress.Address.State;
                address.PostalCode = editAddress.Address.PostalCode;
                address.Country = editAddress.Address.Country;
                AddBannerMessage("Address updated", AdaptiveContainerStyle.Good);
            }
            else
            {
                AddBannerMessage("Address not found", AdaptiveContainerStyle.Attention);
            }
        }
        else
        {
            App.Addresses.Add(editAddress.Address);
            AddBannerMessage("Address added", AdaptiveContainerStyle.Good);
        }
    }

    public void OnEditCanceled(string? message)
    {
        if (!String.IsNullOrWhiteSpace(message))
        {
            AddBannerMessage(message, AdaptiveContainerStyle.Accent);
        }
        else
        {
            AddBannerMessage("Canceled", AdaptiveContainerStyle.Accent);
        }
    }
}