@attribute [CommandInfo("Integration Test", "a card for running an integration test")]
@inherits CardView<UnitTestApp>

<CascadingAuthenticationState>
    <Card Version="1.4">
        <TextBlock Size="AdaptiveTextSize.ExtraLarge" Weight="AdaptiveTextWeight.Bolder">Unit Tests</TextBlock>
        <TextBlock Size="AdaptiveTextSize.Large" Weight="AdaptiveTextWeight.Bolder">Activation: @App.Client.Activation</TextBlock>
        <TextBlock>This card runs integration tests:</TextBlock>
        <TextBlock>* Refresh Button</TextBlock>
        <TextBlock>* Secondary Actions</TextBlock>
        <TextBlock>* Open Url</TextBlock>
        <TextBlock>* Copy Url</TextBlock>
        <TextBlock>* Link Unfurling</TextBlock>
        @* <TextBlock>* Auth</TextBlock> *@

        @if (IsTaskModule)
        {
            if (!IsPreview)
            {
                @if (TaskAction == null)
                {
                    <ActionExecute Verb="@nameof(OnInsert)" Title="Insert" />
                    <ActionExecute Verb="@nameof(OnPost)" Title="Post" />
                }
                else 
                {
                    <ActionOK />
                }
            }
        }
        else
        {
            <ActionExecute Verb="@nameof(OnStart)" Title="Start" />
        }
    </Card>
</CascadingAuthenticationState>

@code
{
    public TaskModuleAction? TaskAction { get; set; }

    public void OnStart()
        => ReplaceView<Refresh>();

    public async Task OnInsert(CancellationToken cancellationToken)
    {
        App.Client.Activation = $"TaskModuleAction.{TaskModuleAction.InsertCard}";
        TaskAction = TaskModuleAction.InsertCard;
    }

    public async Task OnPost(CancellationToken cancellationToken)
    {
        App.Client.Activation = $"TaskModuleAction.{TaskModuleAction.PostCard}";
        TaskAction = TaskModuleAction.PostCard;
    }


    public async Task OnOK(CancellationToken cancellationToken)
    {
        CloseTaskModule(TaskAction.Value);
    }
}
