@using System.Text
@using Crazor.Server
@using Microsoft.Extensions.Configuration
@using Newtonsoft.Json.Linq
@inherits CardView<UnitTestApp, BugReport>

<Card Version="1.4">
    <TextBlock Size="AdaptiveTextSize.ExtraLarge" Weight="AdaptiveTextWeight.Bolder">File bug</TextBlock>
    <TextBlock Size="AdaptiveTextSize.Large" Weight="AdaptiveTextWeight.Bolder">@App.Client.Activation</TextBlock>
    <FactSet>
        <Fact Title="ChannelId" Value="@App.Activity.ChannelId" />
    </FactSet>

    <InputChoiceSet Binding="App.Client.Platform" Label="What platform?" />
    <InputChoiceSet Binding="App.Client.ConversationType" Label="What kind of conversation?" />

    <InputText IsMultiline="false" Binding="Model.Title" Label="Title" />
    <InputText IsMultiline="true" Binding="Model.Description" Label="Description" />

    <ActionCancel />
    <ActionOK Title="Submit" />
</Card>

@code {

    [Inject]
    public IConfiguration Configuration { get; set; }

    public async Task OnOK(CancellationToken cancellationToken)
    {
        StringBuilder sb = new StringBuilder();
        sb.AppendLine(Model.Description);
        sb.AppendLine();
        sb.AppendLine("# Client Context ");
        sb.AppendLine($"```yaml\n{YamlConverter.YamlConvert.SerializeObject(App.Client)}\n```");
        sb.AppendLine();
        sb.AppendLine("# Activity");
        sb.AppendLine($"```yaml\n{YamlConverter.YamlConvert.SerializeObject(Model.LastActivity ?? new Activity())}\n```");
        sb.AppendLine();

        var botEmail = Configuration.GetValue<string>("Channels:email:bot");
        var botName = Configuration.GetValue<string>("BotName");
        var botId = Configuration.GetValue<string>("MicrosoftAppId");
        var from = new ChannelAccount(botEmail, botName);
        var recipient = new ChannelAccount("thermous@iciclecreek.com", "Tom");

        var emailActivity = Activity.CreateMessageActivity();
        emailActivity.ChannelId = Channels.Email;
        emailActivity.From = from;
        emailActivity.Recipient = recipient;
        emailActivity.Text = sb.ToString();
        emailActivity.ChannelData = new EmailChannelData()
            {
                Subject = this.Model.Title,
            };
        emailActivity.Attachments.Add(new Attachment()
            {
                ContentType = "text",
                Content = JsonConvert.SerializeObject(emailActivity)
            });

        await App.Context.TurnContext.Adapter.CreateConversationAsync(
            botAppId: botId,
            channelId: Channels.Email,
            serviceUrl: $"https://{Channels.Email}.botframework.com",
            audience: null, // is this right?
            conversationParameters: new ConversationParameters(bot: from, members: new[] { recipient }, activity: (Activity)emailActivity),
            callback: (tc, ct) => Task.CompletedTask,
            cancellationToken: cancellationToken);

        this.CloseView();
    }
}