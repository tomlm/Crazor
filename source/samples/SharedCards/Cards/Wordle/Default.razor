@using SharedCards.Cards.Wordle
@using System.ComponentModel.DataAnnotations;
@inherits CardView<WordleApp>
@attribute [CommandInfo("Play Wordle", "Play a game of wordle")]

<Card Version="1.5" Title="Play wordle">
    <TextBlock Size="AdaptiveTextSize.Large" Style="AdaptiveTextBlockStyle.Heading">Wordle for @DateTime.Now.ToShortDateString()!</TextBlock>

    <Table GridStyle="AdaptiveContainerStyle.Default" ShowGridLines="true" FirstRowAsHeaders="false">
        <TableColumn Width="1" />
        <TableColumn Width="1" />
        <TableColumn Width="1" />
        <TableColumn Width="1" />
        <TableColumn Width="1" />
        @foreach (var guess in Game.Guesses)
        {
            <TableRow HorizontalCellContentAlignment="AdaptiveHorizontalContentAlignment.Center" VerticalCellContentAlignment="AdaptiveVerticalContentAlignment.Center">
                @foreach (var letter in guess.Letters)
                {
                    <TableCell Style="@letter.State"><TextBlock Size="AdaptiveTextSize.ExtraLarge" Weight="AdaptiveTextWeight.Bolder">@letter.Value</TextBlock></TableCell>
                }
            </TableRow>
        }
        @for (int guessLeft = Game.Guesses.Count; guessLeft < 6; guessLeft++)
        {
            <TableRow HorizontalCellContentAlignment="AdaptiveHorizontalContentAlignment.Center" VerticalCellContentAlignment="AdaptiveVerticalContentAlignment.Center">
                <TableCell Style="AdaptiveContainerStyle.Emphasis" MinHeight="45px"></TableCell>
                <TableCell Style="AdaptiveContainerStyle.Emphasis" MinHeight="45px"></TableCell>
                <TableCell Style="AdaptiveContainerStyle.Emphasis" MinHeight="45px"></TableCell>
                <TableCell Style="AdaptiveContainerStyle.Emphasis" MinHeight="45px"></TableCell>
                <TableCell Style="AdaptiveContainerStyle.Emphasis" MinHeight="45px"></TableCell>
            </TableRow>
        }
    </Table>
    <InputText Binding="Guess" Placeholder="Enter Guess">
        <InlineAction>
            <ActionExecute Verb="OnSubmit" Title="Submit" />
        </InlineAction>
    </InputText>
</Card>

@code
{
    [Required]
    [StringLength(maximumLength: 5, ErrorMessage = "Word must be 5 chars")]
    public string Guess { get; set; }

    public WordleGame Game { get; set; }

    public async override Task OnInitializedAsync(CancellationToken cancellationToken)
    {
        // First person to play the game sets Todays word for the world.
        if (App.TodaysWord == null)
        {
            App.TodaysWord = WordleApp.Words.Skip(new Random().Next(WordleApp.Words.Count)).First();
        }

        // see if player is already played
        Game = (await App.LoadGame(DateTime.Now.ToString("yyyyMMdd"), App.Activity.From.Id, cancellationToken))!;
        if (Game != null)
        {
            if (Game.IsDone)
                ShowView(Game.GetResultsRoute());
        }
        else
        {
            Game = new WordleGame(App.TodaysWord, App.Activity?.LocalTimestamp ?? DateTimeOffset.Now)
            {
                Player = App.Activity!.From,
            };
        }
    }

    public async Task OnRefresh(CancellationToken cancellationToken)
    {
        // if someone tries to view the card and it's done route to the results page
        if (Game.IsDone)
        {
            await App.SaveGame(Game, cancellationToken);
            ReplaceView(Game.GetResultsRoute());
        }
    }

    public async Task OnSubmit(CancellationToken cancellationToken)
    {
        var guess = Guess.Trim().ToUpper();
        if (IsModelValid && !WordleApp.Words.Contains(guess))
        {
            AddBannerMessage($"{guess} is not a valid wordle word.", AdaptiveContainerStyle.Attention);
        }
        else
            Game.AddUserGuess(guess);

        if (Game.IsDone)
        {
            await App.SaveGame(Game, cancellationToken);
            ReplaceView(Game.GetResultsRoute());
        }
    }

}