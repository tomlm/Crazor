@attribute [CardRoute("{Id}")]

@using SharedCards.Cards.Dice
@inherits CardView<DiceApp, DiceModel>

<Card Version="1.4">
    <TextBlock Size="AdaptiveTextSize.Large" Weight="AdaptiveTextWeight.Bolder" Style="AdaptiveTextBlockStyle.Heading">@Model.Name</TextBlock>
    @if (Model.Values != null)
    {
        <ImageSet>
            @foreach (var die in Model.Values)
            {
                <Image Url="@App.GetContentUrl($"~/Cards/Dice/dice{die}.png")" Size="AdaptiveImageSize.Medium" />
            }
        </ImageSet>
    }
    <ActionExecute Verb="@nameof(OnRollDice)" Title="Roll Dice" />
    <ActionExecute Title="Refresh" />
    <ActionExecute Verb="@nameof(OnSettings)" AssociatedInputs="AdaptiveAssociatedInputs.None" Mode="AdaptiveActionMode.Secondary" Title="Settings" IconUrl="@App.GetContentUrl("~/images/Settings.png")" />
</Card>

@code {
    [FromCardRoute]
    public string Id { get; set; }

    public async override Task OnActionAsync(AdaptiveCardInvokeAction action, CancellationToken cancellationToken)
    {
        this.Model = (await App.Memory.GetScopedObjectAsync<DiceModel>("dice", Id, cancellationToken))!;
        if (this.Model == null)
            ShowView($"{Id}/settings");
        else
            await base.OnActionAsync(action, cancellationToken);
    }

    public async Task OnRollDice(CancellationToken cancellationToken)
    {
        Model.RollDice();
        await App.Memory.SaveScopedObjectAsync("dice", Id, Model, cancellationToken);
    }

    public void OnSettings()
    {
        ShowView($"{Id}/settings");
    }
}