@using Microsoft.Bing.WebSearch
@using Microsoft.Bing.WebSearch.Models
@using Microsoft.Extensions.Configuration
@inherits CardView

<Card Version="1.5">
    <TextBlock Size="ExtraLarge" Weight="Bolder">Bing Search</TextBlock>
    <SearchBox Id="@nameof(Query)" Value="@Query" Placeholder="Enter search terms" Title="Search"/>
    
    <ColumnSet>
        <Column Width="auto">
            @if (HasPrev())
            {
                <ActionSet>
                    <Action.Execute Title="<" Verb="@nameof(OnPrevious)" />
                </ActionSet>
            }
        </Column>
        <Column Width="stretch" />
        <Column Width="auto">
            @if (HasNext())
            {
                <ActionSet>
                    <Action.Execute Title=">" Verb="@nameof(OnNext)" />
                </ActionSet>
            }
        </Column>
    </ColumnSet>

    @if (Results != null)
    {
        @foreach (var result in Results)
        {
            <Container Separator="true">
                <ColumnSet>
                    <Column Width="stretch">
                        <TextBlock Weight="Bolder">[@result.Name](@result.DisplayUrl)</TextBlock>
                        <TextBlock Spacing="None">[@result.DisplayUrl](@result.DisplayUrl)</TextBlock>
                        <TextBlock Spacing="Small">@result.Snippet</TextBlock>
                    </Column>
                    <Column Width="auto">
                        @if (!String.IsNullOrEmpty(result.ThumbnailUrl))
                        {
                            <Image Url="@result.ThumbnailUrl" Size="Large" />
                        }
                    </Column>
                </ColumnSet>
            </Container>
        }
    }
</Card>

@functions {
    [BindProperty]
    [Required]
    [StringLength(100)]
    public string? Query { get; set; }

    [BindProperty]
    public int Offset { get; set; }

    public const int PageSize = 5;

    [TempMemory]
    public IList<WebPage> Results { get; set; } = new List<WebPage>();

    public bool HasNext() 
        => Results.Any();

    public bool HasPrev() 
        => Results.Any() && Offset > 0;

    public async Task OnSearch()
    {
        if (!String.IsNullOrWhiteSpace(Query))
        {
            var configuration = (IConfiguration)ViewContext.HttpContext.RequestServices.GetService(typeof(IConfiguration))!;
            var apiKey = configuration.GetValue<string>("BingKey");
            var search = new WebSearchClient(new ApiKeyServiceClientCredentials(apiKey));

            var searchResult = await search.Web.SearchAsync(query: Query, count: PageSize, offset: Offset);

            Results = searchResult.WebPages.Value!;
        }
    }

    public async Task OnNext()
    {
        Offset += PageSize;
        await OnSearch();
    }

    public async Task OnPrevious()
    {
        if (Offset != 0)
            Offset -= PageSize;
        await OnSearch();
    }
}
