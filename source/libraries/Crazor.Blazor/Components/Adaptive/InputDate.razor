@using Crazor
@using Crazor.Attributes;
@using Microsoft.AspNetCore.Components;
@using System.ComponentModel;
@using System.ComponentModel.DataAnnotations;
@using System.Reflection;
@inherits InputBase<AdaptiveDateInput>

<ac:Input.Date @attributes="@GetAttributes()">
    <CascadingValue Name="ParentItem" Value="@Item">@ChildContent</CascadingValue>
</ac:Input.Date>
@if (ShowErrors == null || ShowErrors == true)
{
    <ValidationMessage Id="@(Binding ?? Id)" />
}

@code
{
    internal const string Format = "yyyy-MM-dd";

    [Parameter]
    public BoolProperty? IsVisible { get => Item.IsVisible; set => Item.IsVisible = value == true; }

    [Parameter]
    public string? Min { get => Item.Min!; set => Item.Min = (value != null) ? DateTime.Parse(value!).ToString(Format)! : null!; }

    [Parameter]
    public string? Max { get => Item.Max!; set => Item.Max = (value != null) ? DateTime.Parse(value!).ToString(Format)! : null!; }

    [Parameter]
    public String? Placeholder { get => Item.Placeholder; set => Item.Placeholder = value!; }

    [Parameter]
    public BoolProperty? Separator { get => Item.Separator; set => Item.Separator = value == true; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveSpacing), "Default")]
    public AdaptiveSpacing Spacing { get => Item.Spacing; set => Item.Spacing = value; }

    [Parameter]
    [Binding(BindingType.Value)]
    public string? Value { get => Item.Value!; set => Item.Value = (value != null) ? DateTime.Parse(value!).ToString(Format)! : null!; }

    [Parameter]
    public String? Height { get => Item.Height?.ToString(); set => Item.Height = AdaptiveHeight.Parse(value!); }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (BindingProperty != null)
        {
            var bindingType = BindingProperty.PropertyType;
            if (bindingType.Name == "Nullable`1")
            {
                bindingType = bindingType.GenericTypeArguments[0];
            }

            var displayAttribute = bindingType.GetCustomAttribute<DisplayAttribute>();
            if (displayAttribute != null && String.IsNullOrEmpty(this.Placeholder))
            {
                this.Placeholder = displayAttribute.GetPrompt();
            }

            if (ClientValidation == null || ClientValidation == true)
            {
                // if we don't have required, but binding property has [Required] then set it
                var rangeAttribute = BindingProperty?.GetCustomAttribute<RangeAttribute>();
                if (this.Min == null && rangeAttribute?.Minimum != null)
                {
                    this.Min = (string)rangeAttribute.Minimum;
                }

                if (this.Max == null && rangeAttribute?.Maximum != null)
                {
                    this.Max = (string)rangeAttribute.Maximum;
                }

                if (this.ErrorMessage == null && rangeAttribute?.ErrorMessage != null)
                {
                    this.ErrorMessage = rangeAttribute?.ErrorMessage;
                }
            }
        }
    }

    protected override Dictionary<string, object> GetAttributes()
    {
        var attributes = new Dictionary<string, object>();
        foreach (var property in this.GetType().GetProperties().Where(p => p.PropertyType != typeof(RenderFragment) && p.GetCustomAttribute<ParameterAttribute>() != null))
        {
            var val = property.GetValue(this);
            var targetProperty = Item!.GetType().GetProperty(property.Name) ?? property;
            var defValue = (targetProperty.PropertyType.IsValueType) ? Activator.CreateInstance(targetProperty.PropertyType) : null;
            if (val != null && !Object.Equals(val, defValue))
            {
                if (val is bool b)
                    // HTML serialization used by Blazor will turn raw bool into just attribute name with no value
                    // we are targeting XML which always must have a value, and bool is represented as string "true"|"false"
                    attributes.Add(property.Name, b.ToString().ToLower());
                else if (val is DateTime dt)
                    attributes.Add(property.Name, dt.ToString(Format));
                else
                    attributes.Add(property.Name, val);
            }
        }
        return attributes;
    }
}
