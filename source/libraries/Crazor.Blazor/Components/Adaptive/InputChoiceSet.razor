@using AdaptiveCards
@using Crazor.Attributes;
@using Humanizer
@using Microsoft.AspNetCore.Components;
@using System.ComponentModel;
@using System.Reflection;
@using System.Text;
@using System.ComponentModel.DataAnnotations
@inherits InputBase<AdaptiveChoiceSetInput>

<ac:Input.ChoiceSet @attributes="@GetAttributes()">
    @if (Item.Choices.Any())
    {
        @foreach (var choice in Item.Choices)
        {
            <Choice Title="@choice.Title" Value="@choice.Value" />
        }
    }
    <CascadingValue Name="ParentItem" Value="@Item">@ChildContent</CascadingValue>
</ac:Input.ChoiceSet>
@if (ShowErrors == null || ShowErrors == true)
{
    <ValidationMessage Id="@(Binding ?? Id)" />
}

@code
{

    [Parameter]
    public BoolProperty? IsMultiSelect { get => Item.IsMultiSelect; set => Item.IsMultiSelect = value == true; }

    [Parameter]
    public BoolProperty? IsVisible { get => Item.IsVisible; set => Item.IsVisible = value == true; }

    [Parameter]
    public String? Placeholder { get => Item.Placeholder; set => Item.Placeholder = value; }

    [Parameter]
    public BoolProperty? Separator { get => Item.Separator; set => Item.Separator = value == true; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveSpacing), "Default")]
    public AdaptiveSpacing Spacing { get => Item.Spacing; set => Item.Spacing = value; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveChoiceInputStyle), "Compact")]
    public AdaptiveChoiceInputStyle Style { get => Item.Style; set => Item.Style = value; }

    [Parameter]
    [Binding(BindingType.Value)]
    public String? Value { get => Item.Value; set => Item.Value = value; }

    [Parameter]
    public BoolProperty? Wrap { get => Item.Wrap; set => Item.Wrap = value == true; }

    [Parameter]
    public String? Height { get => Item.Height?.ToString(); set => Item.Height = AdaptiveHeight.Parse(value!); }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (BindingProperty != null)
        {
            var bindingType = BindingProperty.PropertyType;
            if (bindingType.Name == "Nullable`1")
            {
                bindingType = bindingType.GenericTypeArguments[0];
            }

            var displayAttribute = bindingType.GetCustomAttribute<DisplayAttribute>();
            if (displayAttribute != null && String.IsNullOrEmpty(this.Placeholder))
            {
                this.Placeholder = displayAttribute.GetPrompt();
            }

            if (bindingType.IsEnum)
            {
                if (ChildContent == null)
                {
                    // automatically compute choice from enumeration.
                    foreach (var value in bindingType.GetEnumValues())
                    {
                        MemberInfo memberInfo = bindingType.GetMember(value.ToString()!).First();

                        // we can then attempt to retrieve the
                        // description attribute from the member info
                        var descriptionAttribute = memberInfo.GetCustomAttribute<DescriptionAttribute>();
                        var displayNameAttribute = memberInfo.GetCustomAttribute<DisplayNameAttribute>();
                        // if we find the attribute we can access its values
                        if (descriptionAttribute != null)
                        {
                            Item.Choices.Add(new AdaptiveChoice() { Title = descriptionAttribute.Description, Value = value?.ToString() });
                        }
                        else if (displayAttribute != null)
                        {
                            Item.Choices.Add(new AdaptiveChoice() { Title = displayNameAttribute?.DisplayName, Value = value?.ToString() });
                        }
                        else
                        {
                            Item.Choices.Add(new AdaptiveChoice() { Title = value.ToString().Humanize(), Value = value.ToString() });
                        }
                    }
                }
            }
        }
    }
}
