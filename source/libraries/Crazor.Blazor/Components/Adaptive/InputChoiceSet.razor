@using AdaptiveCards
@using Crazor.Attributes;
@using Microsoft.AspNetCore.Components;
@using System.ComponentModel;
@using System.Reflection;
@using System.Text;
@inherits Input<AdaptiveChoiceSetInput>

<ac:Input.ChoiceSet @attributes="@GetAttributes()">
    @if (Item.Choices.Any())
    {
        @foreach(var choice in Item.Choices)
        {
            <Choice Title="@choice.Title" Value="@choice.Value" />
        }
    }
    <CascadingValue Name="ParentItem" Value="@Item">@ChildContent</CascadingValue>
</ac:Input.ChoiceSet>
@if (ShowErrors == null || ShowErrors == true)
{
    <ValidationErrors Id="@(Binding ?? Id)" />
}

@code
{

    [Parameter]
    public BoolProperty? IsMultiSelect { get; set; }

    [Parameter]
    public BoolProperty? IsVisible { get; set; }

    [Parameter]
    public String? Placeholder { get; set; }

    [Parameter]
    public BoolProperty? Separator { get; set; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveSpacing), "Default")]
    public AdaptiveSpacing Spacing { get; set; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveChoiceInputStyle), "Compact")]
    public AdaptiveChoiceInputStyle Style { get; set; }

    [Parameter]
    [Binding(BindingType.Value)]
    public String? Value { get; set; }

    [Parameter]
    public BoolProperty? Wrap { get; set; }

    [Parameter]
    public String? Height { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (BindingProperty != null)
        {
            var bindingType = BindingProperty.PropertyType;
            if (bindingType.Name == "Nullable`1")
            {
                bindingType = bindingType.GenericTypeArguments[0];
            }
            if (bindingType.IsEnum)
            {
                // automatically compute choice from enumeration.
                foreach (var value in bindingType.GetEnumValues())
                {
                    MemberInfo memberInfo = bindingType.GetMember(value.ToString()!).First();

                    // we can then attempt to retrieve the
                    // description attribute from the member info
                    var descriptionAttribute = memberInfo.GetCustomAttribute<DescriptionAttribute>();
                    var displayAttribute = memberInfo.GetCustomAttribute<DisplayNameAttribute>();
                    // if we find the attribute we can access its values
                    if (descriptionAttribute != null)
                    {
                        Item.Choices.Add(new AdaptiveChoice() { Title = descriptionAttribute.Description, Value = value?.ToString() });
                    }
                    else if (displayAttribute != null)
                    {
                        Item.Choices.Add(new AdaptiveChoice() { Title = displayAttribute.DisplayName, Value = value?.ToString() });
                    }
                    else
                    {
                        Item.Choices.Add(new AdaptiveChoice() { Title = value.ToString(), Value = value.ToString() });
                    }
                }
            }
        }
    }
}
