@using AdaptiveCards
@using Microsoft.AspNetCore.Components;
@using System.ComponentModel;
@inherits ElementComponent<AdaptiveTable>

<ac:Table @attributes="@GetAttributes()">
    <CascadingValue Name="ParentItem" Value="@Item">@ChildContent</CascadingValue>
</ac:Table>

@code
{
    [Parameter]
    public BoolProperty? FirstRowAsHeaders { get => Item.FirstRowAsHeaders; set => Item.FirstRowAsHeaders = value == true; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveContainerStyle), "Default")]
    public AdaptiveContainerStyle? GridStyle { get => Item.GridStyle; set => Item.GridStyle = value; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveHorizontalAlignment), "Left")]
    public AdaptiveHorizontalContentAlignment HorizontalCellContentAlignment
    {
        get => Item.HorizontalCellContentAlignment;
        set => Item.HorizontalCellContentAlignment = value;
    }

    [Parameter]
    public BoolProperty? IsVisible { get => Item.IsVisible; set => Item.IsVisible = value == true; }

    [Parameter]
    public BoolProperty? Separator { get => Item.Separator; set => Item.Separator = value == true; }

    [Parameter]
    public BoolProperty? ShowGridLines { get => Item.ShowGridLines; set => Item.ShowGridLines = value == true; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveSpacing), "Default")]
    public AdaptiveSpacing Spacing { get => Item.Spacing; set => Item.Spacing = value; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveVerticalContentAlignment), "Top")]
    public AdaptiveVerticalContentAlignment VerticalCellContentAlignment { get => Item.VerticalCellContentAlignment; set => Item.VerticalCellContentAlignment = value; }

    [Parameter]
    public String? Height { get => Item.Height?.ToString(); set => Item.Height = AdaptiveHeight.Parse(value!); }
}
