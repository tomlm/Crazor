@using Crazor
@using Microsoft.AspNetCore.Components;
@using System.ComponentModel;
@inherits ElementComponent<AdaptiveImage>

<ac:Image @attributes="@GetAttributes()">
    <CascadingValue Name="ParentItem" Value="@Item">@ChildContent</CascadingValue>
</ac:Image>

@code
{

    [Parameter]
    public String? AltText { get => Item.AltText; set => Item.AltText = value!; }

    [Parameter]
    public String? BackgroundColor { get => Item.BackgroundColor; set => Item.BackgroundColor = value!; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveHorizontalAlignment), "Left")]
    public AdaptiveHorizontalAlignment HorizontalAlignment { get => Item.HorizontalAlignment; set => Item.HorizontalAlignment = value!; }

    [Parameter]
    public BoolProperty? IsVisible { get => Item.IsVisible; set => Item.IsVisible = value == true; }

    [Parameter]
    public BoolProperty? Separator { get => Item.Separator; set => Item.Separator = value == true; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveImageSize), "Auto")]
    public AdaptiveImageSize Size { get => Item.Size; set => Item.Size = value; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveSpacing), "Default")]
    public AdaptiveSpacing Spacing { get => Item.Spacing; set => Item.Spacing = value; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveImageStyle), "Normal")]
    public AdaptiveImageStyle Style { get => Item.Style; set => Item.Style = value; }

    [Parameter]
    public String? Url { get => Item.Url?.ToString(); set => Item.Url = Uri.TryCreate(value, UriKind.RelativeOrAbsolute, out var val) ? val : null!; }

    [Parameter]
    public AdaptiveHeight? Height { get => Item.Height; set => Item.Height = value!; }

    [Parameter]
    public String? Width { get => (Item.PixelWidth != 0) ? Item.PixelWidth.ToString() : null; set => Item.PixelWidth = uint.Parse(value!.Replace("px", string.Empty)); }
}
