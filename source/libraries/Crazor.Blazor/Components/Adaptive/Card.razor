@using Crazor;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Rendering;
@using System.ComponentModel;
@inherits TypedElementComponent<AdaptiveCard>
@implements IChildItem

<ac:Card xmlns="@AdaptiveCard.ContentType" xmlns:ac="@AdaptiveCard.ContentType" @attributes="@GetAttributes()">
    <CascadingValue Name="ParentItem" Value="@Item">
        @ChildContent
    </CascadingValue>
</ac:Card>

@code {
    [Parameter]
    public String? FallbackText { get => Item.FallbackText; set => Item.FallbackText = value!; }

    [Parameter]
    public String? Lang { get => Item.Lang; set => Item.Lang = value!; }

    [Parameter]
    public string MinHeight { get => Item.MinHeight; set => Item.MinHeight = value; }

    [Parameter]
    public BoolProperty? Rtl { get => Item.Rtl; set => Item.Rtl = value == true; }

    [Parameter]
    public String? Speak { get => Item.Speak; set => Item.Speak = value!; }

    [Parameter]
#pragma warning disable CS0618 // AdaptiveCard.Title is obselete
    public String? Title { get => Item.Title; set => Item.Title = value!; }
#pragma warning restore CS0618 // AdaptiveCard.Title is obselete

    [Parameter]
    [DefaultValue(typeof(AdaptiveVerticalContentAlignment), "Top")]
    public AdaptiveVerticalContentAlignment VerticalContentAlignment { get => Item.VerticalContentAlignment; set => Item.VerticalContentAlignment = value; }

    [Parameter]
    public String? Height { get => Item.Height?.ToString(); set => Item.Height = value!; }

    [Parameter]
    public String? Version { get => Item.Version?.ToString(); set => Item.Version = value!; }

    public virtual void AddToParent()
    {
        ArgumentNullException.ThrowIfNull(ParentItem);

        if (ParentItem is CardViewWrapper wrapper)
        {
            wrapper.Card = Item;
        }
        else if (ParentItem is AdaptiveShowCardAction action)
        {
            action.Card = Item;
        }
    }
}
