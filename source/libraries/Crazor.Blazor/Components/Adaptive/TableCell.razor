@using Crazor
@using Microsoft.AspNetCore.Components;
@using System.ComponentModel;
@inherits ElementComponent<AdaptiveTableCell>

<ac:TableCell @attributes="@GetAttributes()">
    <CascadingValue Name="ParentItem" Value="@Item">@ChildContent</CascadingValue>
</ac:TableCell>

@code
{

    [Parameter]
    public BoolProperty? Bleed { get => Item.Bleed; set => Item.Bleed = value == true; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveHorizontalAlignment), "Left")]
    public AdaptiveHorizontalContentAlignment HorizontalCellContentAlignment { get => Item.HorizontalCellContentAlignment; set => Item.HorizontalCellContentAlignment = value; }

    [Parameter]
    public BoolProperty? IsVisible { get => Item.IsVisible; set => Item.IsVisible = value == true; }

    [Parameter]
    public String? MinHeight { get => Item.MinHeight ; set => Item.MinHeight  = value!; }

    [Parameter]
    public BoolProperty? Rtl { get => Item.Rtl; set => Item.Rtl = value == true; }

    [Parameter]
    public BoolProperty? Separator { get => Item.Separator; set => Item.Separator = value == true; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveSpacing), "Default")]
    public AdaptiveSpacing Spacing { get => Item.Spacing ; set => Item.Spacing  = value; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveContainerStyle), "Default")]
    public AdaptiveContainerStyle? Style { get => Item.Style ; set => Item.Style  = value; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveVerticalContentAlignment), "Top")]
    public AdaptiveVerticalContentAlignment VerticalCellContentAlignment { get => Item.VerticalCellContentAlignment; set => Item.VerticalCellContentAlignment = value; }

    [Parameter]
    public String? Height { get => Item.Height ?.ToString(); set => Item.Height  = AdaptiveHeight.Parse(value!); }
}
