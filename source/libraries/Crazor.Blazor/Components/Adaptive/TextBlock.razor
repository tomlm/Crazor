@using Microsoft.AspNetCore.Components;
@using System.ComponentModel;
@using Crazor;
@using Crazor.Blazor.ComponentRenderer;
@inherits ElementComponent<AdaptiveTextBlock>

<ac:TextBlock @attributes="@GetAttributes()">
    <CascadingValue Name="ParentItem" Value="@Item">@ChildContent</CascadingValue>
</ac:TextBlock>

@code
{
    [Parameter]
    [DefaultValue(typeof(AdaptiveTextColor), "Default")]
    public AdaptiveTextColor Color { get => Item.Color; set => Item.Color = value; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveFontType), "Default")]
    public AdaptiveFontType FontType { get => Item.FontType; set => Item.FontType = value; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveHorizontalAlignment), "Left")]
    public AdaptiveHorizontalAlignment HorizontalAlignment { get => Item.HorizontalAlignment; set => Item.HorizontalAlignment = value; }

    [Parameter]
    public BoolProperty? IsSubtle { get => (BoolProperty)Item.IsSubtle; set => Item.IsSubtle = value == true; }

    [Parameter]
    public BoolProperty? IsVisible { get => (BoolProperty)Item.IsVisible; set => Item.IsVisible = value == true; }

    [Parameter]
    public Int32? MaxLines { get => Item.MaxLines; set => Item.MaxLines = value ?? 0; }

    [Parameter]
    public Int32? MaxWidth { get => Item.MaxWidth; set => Item.MaxWidth = value ?? 0; }

    [Parameter]
    [DefaultValue(false)]
    public BoolProperty? Separator { get => (BoolProperty)Item.Separator; set => Item.Separator = value == true; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveTextSize), "Default")]
    public AdaptiveTextSize Size { get => Item.Size; set => Item.Size = value; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveSpacing), "Default")]
    public AdaptiveSpacing Spacing { get => Item.Spacing; set => Item.Spacing = value; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveTextBlockStyle), "Default")]
    public AdaptiveTextBlockStyle Style { get => Item.Style; set => Item.Style = value; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveTextWeight), "Normal")]
    public AdaptiveTextWeight Weight { get => Item.Weight; set => Item.Weight = value; }

    [Parameter]
    public BoolProperty? Wrap { get => (BoolProperty)Item.Wrap; set => Item.Wrap = value == true; }

    [Parameter]
    public String? Height { get => Item.Height?.ToString(); set => Item.Height = AdaptiveHeight.Parse(value!); }

    [Parameter]
    public String? Text { get => Item.Text; set => Item.Text = value!; }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (String.IsNullOrEmpty(Text) && ChildContent != null)
        {
            Text = ChildContent.GetStringContent();
        }
    }
}
