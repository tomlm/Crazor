@using Crazor.Blazor.ComponentRenderer;
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using System.ComponentModel
@inherits ActionComponent<AdaptiveShowTaskModuleAction>

<ac:Action.ShowTaskModule @attributes="@GetAttributes()">
    <CascadingValue Name="ParentItem" Value="@Item">@ChildContent</CascadingValue>
</ac:Action.ShowTaskModule>

@code
{
    private static JObject fetch = new JObject() { { "type", "task/fetch" } };

    /// <summary>
    /// The Card Route to show in a taskmodule, if not in teams this will be equivelent of navigating to a view.
    /// </summary>
    [Parameter]
    public string? Route { get => Item.Route; set => Item.Route = value!; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveAssociatedInputs), "Auto")]
    public AdaptiveAssociatedInputs AssociatedInputs { get => Item.AssociatedInputs; set => Item.AssociatedInputs = value; }

    [Parameter]
    public String? IconUrl { get => Item.IconUrl; set => Item.IconUrl = value!; }

    [Parameter]
    public BoolProperty? IsEnabled { get => Item.IsEnabled; set => Item.IsEnabled = value == true; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveActionMode), "Primary")]
    public AdaptiveActionMode Mode { get => Item.Mode; set => Item.Mode = value; }

    [Parameter]
    [DefaultValue(typeof(string), "Default")]
    public string Style { get => Item.Style; set => Item.Style = value; }

    [Parameter]
    public String? Title { get => Item.Title; set => Item.Title = value!; }

    [Parameter]
    public String? Tooltip { get => Item.Tooltip; set => Item.Tooltip = value!; }
}
