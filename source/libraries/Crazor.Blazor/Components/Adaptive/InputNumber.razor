@using AdaptiveCards
@using Crazor.Attributes;
@using Microsoft.AspNetCore.Components;
@using System.ComponentModel;
@using System.ComponentModel.DataAnnotations;
@using System.Reflection;
@inherits Input<AdaptiveNumberInput>

<ac:Input.Number @attributes="@GetAttributes()">
    <CascadingValue Name="ParentItem" Value="@Item">@ChildContent</CascadingValue>
</ac:Input.Number>
@if (ShowErrors == null || ShowErrors == true)
{
    <ValidationErrors Id="@(Binding ?? Id)" />
}

@code
{

    [Parameter]
    public BoolProperty? IsVisible { get => Item.IsVisible; set => Item.IsVisible = value == true; }

    [Parameter]
    public Double? Max { get => Item.Max == double.NaN ? null : Item.Max; set => Item.Max = value ?? double.NaN; }

    [Parameter]
    public Double? Min { get => Item.Min == double.NaN ? null : Item.Min; set => Item.Min = value ?? double.NaN; }

    [Parameter]
    public String? Placeholder { get => Item.Placeholder; set => Item.Placeholder = value; }

    [Parameter]
    public BoolProperty? Separator { get => Item.Separator; set => Item.Separator = value == value == true; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveSpacing), "Default")]
    public AdaptiveSpacing Spacing { get => Item.Spacing; set => Item.Spacing = value; }

    [Parameter]
    [Binding(BindingType.Value)]
    public Double? Value { get => Item.Value == double.NaN ? null : Item.Value; set => Item.Value = value ?? double.NaN; }

    [Parameter]
    public String? Height { get => Item.Height?.ToString(); set => Item.Height = new AdaptiveDimension(value!); }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        var rangeAttribute = BindingProperty?.GetCustomAttribute<RangeAttribute>();
        if (this.Min == null && rangeAttribute?.Minimum != null)
        {
            this.Min = Convert.ToDouble(rangeAttribute.Minimum);
        }

        if (this.Max == null && rangeAttribute?.Maximum != null)
        {
            this.Max = Convert.ToDouble(rangeAttribute.Maximum);
        }

        if (this.ErrorMessage == null && rangeAttribute?.ErrorMessage != null)
        {
            this.ErrorMessage = rangeAttribute?.ErrorMessage;
        }
    }

}
