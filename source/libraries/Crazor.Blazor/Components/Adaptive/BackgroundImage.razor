@using Crazor
@using Crazor.Attributes;
@using Microsoft.AspNetCore.Components;
@using System.ComponentModel;
@using System.Xml.Linq;
@inherits ItemComponent<AdaptiveBackgroundImage>
@implements IChildItem

<ac:BackgroundImage @attributes="@GetAttributes()">
    <CascadingValue Name="ParentItem" Value="@Item">@ChildContent</CascadingValue>
</ac:BackgroundImage>

@code
{
    [Parameter]
    [DefaultValue(typeof(AdaptiveImageFillMode), "Cover")]
    public AdaptiveImageFillMode FillMode { get => Item.FillMode; set => Item.FillMode = value; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveHorizontalAlignment), "Left")]
    public AdaptiveHorizontalAlignment HorizontalAlignment { get => Item.HorizontalAlignment; set => Item.HorizontalAlignment = value; }

    [Parameter]
    public String? Url { get => Item.Url?.ToString(); set => Item.Url = Uri.TryCreate(value, UriKind.RelativeOrAbsolute, out var val) ? val : null!; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveVerticalAlignment), "Top")]
    public AdaptiveVerticalAlignment VerticalAlignment { get => Item.VerticalAlignment; set => Item.VerticalAlignment = value!; }

    public virtual void AddToParent()
    {
        ArgumentNullException.ThrowIfNull(ParentItem);
        if (ParentItem is AdaptiveCard card)
        {
            card.BackgroundImage = this.Item;
        }
        else if (ParentItem is AdaptiveContainer container)
        {
            container.BackgroundImage = this.Item;
        }
        else
            throw new Exception($"{ParentItem.GetType().Name} is not a valid parent for BackgroundImage");
    }
}
