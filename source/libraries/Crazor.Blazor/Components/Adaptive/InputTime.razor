@using AdaptiveCards
@using Crazor.Attributes;
@using Microsoft.AspNetCore.Components;
@using System.ComponentModel;
@using System.ComponentModel.DataAnnotations;
@using System.Reflection;
@inherits InputBase<AdaptiveTimeInput>

<ac:Input.Time @attributes="@GetAttributes()">
    <CascadingValue Name="ParentItem" Value="@Item">@ChildContent</CascadingValue>
</ac:Input.Time>
@if (ShowErrors == null || ShowErrors == true)
{
    <ValidationMessage Id="@(Binding ?? Id)" />
}

@code
{
    internal const string Format = "HH:mm";

    [Parameter]
    public BoolProperty? IsVisible { get => Item.IsVisible; set => Item.IsVisible = value == true; }

    /// <summary>
    /// Format of "HH:MM"
    /// </summary>
    [Parameter]
    public string? Min { get => Item.Min!; set => Item.Min = (value != null) ? DateTime.Parse(value!).ToString(Format)! : null!; }

    /// <summary>
    /// Format of HH:MM
    /// </summary>
    [Parameter]
    public string? Max { get => Item.Max!; set => Item.Max = (value != null) ? DateTime.Parse(value!).ToString(Format)! : null!; }

    [Parameter]
    public String? Placeholder { get => Item.Placeholder; set => Item.Placeholder = value!; }

    [Parameter]
    [DefaultValue(false)]
    public BoolProperty? Separator { get => Item.Separator; set => Item.Separator = value == true; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveSpacing), "Default")]
    public AdaptiveSpacing Spacing { get => Item.Spacing; set => Item.Spacing = value; }

    /// <summary>
    /// Format of "HH:MM"
    /// </summary>
    [Parameter]
    [Binding(BindingType.Value)]
    public string? Value { get => Item.Value!; set => Item.Value = (value != null) ? DateTime.Parse(value!).ToString(Format)! : null!; }

    [Parameter]
    public String? Height { get => Item.Height?.ToString(); set => Item.Height = AdaptiveHeight.Parse(value); }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (BindingProperty != null)
        {
            var bindingType = BindingProperty.PropertyType;
            if (bindingType.Name == "Nullable`1")
            {
                bindingType = bindingType.GenericTypeArguments[0];
            }

            var displayAttribute = bindingType.GetCustomAttribute<DisplayAttribute>();
            if (displayAttribute != null && String.IsNullOrEmpty(this.Placeholder))
            {
                this.Placeholder = displayAttribute.GetPrompt();
            }

            if (ClientValidation == null || ClientValidation == true)
            {
                // if we don't have required, but binding property has [Required] then set it
                var rangeAttribute = BindingProperty?.GetCustomAttribute<RangeAttribute>();
                if (this.Min == null && rangeAttribute?.Minimum != null)
                {
                    this.Min = DateTime.Parse((string)rangeAttribute.Minimum).ToString(Format);
                }

                if (this.Max == null && rangeAttribute?.Maximum != null)
                {
                    this.Max = DateTime.Parse((string)rangeAttribute.Maximum).ToString(Format);
                }

                if (this.ErrorMessage == null && rangeAttribute?.ErrorMessage != null)
                {
                    this.ErrorMessage = rangeAttribute?.ErrorMessage;
                }
            }
        }
    }
}
