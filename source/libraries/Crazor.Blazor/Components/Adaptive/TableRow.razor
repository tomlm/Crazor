@using Crazor
@using Microsoft.AspNetCore.Components;
@using System.ComponentModel;
@inherits ItemComponent<AdaptiveTableRow>
@implements IChildItem

<ac:TableRow @attributes="@GetAttributes()">
    <CascadingValue Name="ParentItem" Value="@Item">@ChildContent</CascadingValue>
</ac:TableRow>


@code
{

    [Parameter]
    [DefaultValue(typeof(AdaptiveHorizontalAlignment), "Left")]
    public AdaptiveHorizontalContentAlignment HorizontalCellContentAlignment { get => Item.HorizontalCellContentAlignment; set => Item.HorizontalCellContentAlignment = value; }

    [Parameter]
    public BoolProperty? IsVisible { get => Item.IsVisible; set => Item.IsVisible = value == true; }

    [Parameter]
    public BoolProperty? Separator { get => Item.Separator; set => Item.Separator = value == true; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveSpacing), "Default")]
    public AdaptiveSpacing Spacing { get => Item.Spacing; set => Item.Spacing = value; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveContainerStyle), "Default")]
    public AdaptiveContainerStyle? Style { get => Item.Style; set => Item.Style = value; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveVerticalContentAlignment), "Top")]
    public AdaptiveVerticalContentAlignment VerticalCellContentAlignment { get => Item.VerticalCellContentAlignment; set => Item.VerticalCellContentAlignment = value; }

    public virtual void AddToParent()
    {
        ArgumentNullException.ThrowIfNull(ParentItem);

        if (this.ParentItem is AdaptiveTable table)
        {
            table.Rows.Add(Item);
        }
        else
        {
            throw new InvalidParentException(this.ParentItem.GetType(), this.Item.GetType());
        }
    }
}
