@using Crazor
@using Crazor.Blazor.ComponentRenderer;
@using Microsoft.AspNetCore.Components;
@using System.ComponentModel;
@inherits ItemComponent<AdaptiveTextRun>
@implements IChildItem

<ac:TextRun @attributes="@GetAttributes()">
    <CascadingValue Name="ParentItem" Value="@Item">@ChildContent</CascadingValue>
</ac:TextRun>

@code
{

    [Parameter]
    [DefaultValue(typeof(AdaptiveTextColor), "Default")]
    public AdaptiveTextColor Color { get => Item.Color ; set => Item.Color  = value; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveFontType), "Default")]
    public AdaptiveFontType FontType { get => Item.FontType ; set => Item.FontType  = value; }

    [Parameter]
    public BoolProperty? Highlight { get => Item.Highlight; set => Item.Highlight = value == true; }

    [Parameter]
    public BoolProperty? IsSubtle { get => Item.IsSubtle; set => Item.IsSubtle = value == true; }

    [Parameter]
    public BoolProperty? Italic { get => Item.Italic; set => Item.Italic = value == true; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveTextSize), "Default")]
    public AdaptiveTextSize Size { get => Item.Size ; set => Item.Size  = value; }

    [Parameter]
    public BoolProperty? Strikethrough { get => Item.Strikethrough; set => Item.Strikethrough = value == true; }

    [Parameter]
    public BoolProperty? Underline { get => Item.Underline; set => Item.Underline = value == true; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveTextWeight), "Normal")]
    public AdaptiveTextWeight Weight { get => Item.Weight ; set => Item.Weight  = value; }

    public String? Text { get => Item.Text; set => Item.Text = value!; }

    public virtual void AddToParent()
    {
        ArgumentNullException.ThrowIfNull(ParentItem);

        if (this.ParentItem is AdaptiveRichTextBlock rtb)
        {
            rtb.Inlines.Add(Item);
        }
        else
        {
            throw new InvalidParentException(this.ParentItem.GetType(), this.Item.GetType());
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (String.IsNullOrWhiteSpace(Text) && ChildContent != null)
        {
            Item.Text = ChildContent.GetStringContent();
        }
    }
}
