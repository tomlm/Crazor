@using AdaptiveCards
@using Crazor.Blazor.ComponentRenderer;
@using Microsoft.AspNetCore.Components;
@using System.ComponentModel;
@inherits ActionComponent<AdaptiveExecuteAction>

<ac:Action.Execute @attributes="@GetAttributes()">
    <CascadingValue Name="ParentItem" Value="@Item">@ChildContent</CascadingValue>
</ac:Action.Execute>

@code
{
    [Parameter]
    [DefaultValue(typeof(AdaptiveAssociatedInputs), "Auto")]
    public AdaptiveAssociatedInputs AssociatedInputs { get => Item.AssociatedInputs; set => Item.AssociatedInputs = value; }

    [Parameter]
    public String? IconUrl { get => Item.IconUrl; set => Item.IconUrl = value; }

    [Parameter]
    public BoolProperty? IsEnabled { get => Item.IsEnabled; set => Item.IsEnabled = value == true; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveActionMode), "Primary")]
    public AdaptiveActionMode Mode { get => Item.Mode; set => Item.Mode = value; }

    [Parameter]
    [DefaultValue(typeof(string), "Default")]
    public string Style { get => Item.Style; set => Item.Style = value; }

    [Parameter]
    public String? Title { get => Item.Title ; set => Item.Title  = value; }

    [Parameter]
    public String? Tooltip { get => Item.Tooltip ; set => Item.Tooltip  = value; }

    [Parameter]
    public String? Verb { get => Item.Verb ; set => Item.Verb  = value; }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (ChildContent != null)
        {
            this.Item.DataJson = ChildContent.GetStringContent();
        }
    }
}
