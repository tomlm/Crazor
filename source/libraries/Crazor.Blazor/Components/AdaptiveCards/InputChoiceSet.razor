@using global::AdaptiveCards
@using Crazor.Attributes;
@using Microsoft.AspNetCore.Components;
@using System.ComponentModel;
@using System.Reflection;
@using System.Text;
@inherits Input<AdaptiveChoiceSetInput>

<ac:Input.ChoiceSet @attributes="@GetAttributes()">
    <CascadingValue Name="ParentModel" Value="@Model">@ChildContent</CascadingValue>
</ac:Input.ChoiceSet>
@if (ShowErrors == null || ShowErrors.Value == true)
{
    <ValidationErrors Id="@(Binding ?? Id)" />
}

@code
{

    [Parameter]
    public Boolean? IsMultiSelect { get => Model.IsMultiSelect; set => Model.IsMultiSelect = value ?? false; }

    [Parameter]
    public Boolean? IsVisible { get => Model.IsVisible; set => Model.IsVisible = value ?? true; }

    [Parameter]
    public String Placeholder { get => Model.Placeholder; set => Model.Placeholder = value; }

    [Parameter]
    public Boolean? Separator { get => Model.Separator; set => Model.Separator = value ?? false; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveSpacing), "Default")]
    public AdaptiveSpacing Spacing { get => Model.Spacing; set => Model.Spacing = value; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveChoiceInputStyle), "Compact")]
    public AdaptiveChoiceInputStyle Style { get => Model.Style; set => Model.Style = value; }

    [Parameter]
    [Binding(BindingType.Value)]
    public String Value { get => Model.Value; set => Model.Value = value; }

    [Parameter]
    public Boolean? Wrap { get => Model.Wrap; set => Model.Wrap = value ?? false; }

    [Parameter]
    public String Height { get => Model.Height?.ToString(); set => Model.Height = value; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();


        if (BindingProperty != null)
        {
            var bindingType = BindingProperty.PropertyType;
            if (bindingType.Name == "Nullable`1")
            {
                bindingType = bindingType.GenericTypeArguments[0];
            }
            if (bindingType.IsEnum)
            {
                // automatically compute choice from enumeration.
                foreach (var value in bindingType.GetEnumValues())
                {
                    MemberInfo memberInfo = bindingType.GetMember(value.ToString()!).First();

                    // we can then attempt to retrieve the
                    // description attribute from the member info
                    var descriptionAttribute = memberInfo.GetCustomAttribute<DescriptionAttribute>();
                    var displayAttribute = memberInfo.GetCustomAttribute<DisplayNameAttribute>();
                    // if we find the attribute we can access its values
                    if (descriptionAttribute != null)
                    {
                        Model.Choices.Add(new AdaptiveChoice() { Title = descriptionAttribute.Description, Value = value?.ToString() });
                    }
                    else if (displayAttribute != null)
                    {
                        Model.Choices.Add(new AdaptiveChoice() { Title = displayAttribute.DisplayName, Value = value?.ToString() });
                    }
                    else
                    {
                        Model.Choices.Add(new AdaptiveChoice() { Title = value.ToString(), Value = value.ToString() });
                    }
                }
            }
        }
    }
}
