@using global::AdaptiveCards
@using Microsoft.AspNetCore.Components;
@using System.ComponentModel;
@inherits ItemComponent<AdaptiveTextRun>

<ac:TextRun @attributes="@GetAttributes()">
    <CascadingValue Name="ParentItem" Value="@Item">@ChildContent</CascadingValue>
</ac:TextRun>

@code
{

    [Parameter]
    [DefaultValue(typeof(AdaptiveTextColor), "Default")]
    public AdaptiveTextColor Color { get; set; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveFontType), "Default")]
    public AdaptiveFontType FontType { get; set; }

    [Parameter]
    public String? Highlight { get; set; }

    [Parameter]
    public BoolProperty? IsSubtle { get; set; }

    [Parameter]
    public String? Italic { get; set; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveTextSize), "Default")]
    public AdaptiveTextSize Size { get; set; }

    [Parameter]
    public BoolProperty? Strikethrough { get; set; }

    [Parameter]
    public String? Underline { get; set; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveTextWeight), "Normal")]
    public AdaptiveTextWeight Weight { get; set; }


    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (this.ParentItem is AdaptiveRichTextBlock rtb)
        {
            rtb.Inlines.Add(Item);
        }
        else
        {
            throw new Exception("Unknown parent type");
        }
    }
}
