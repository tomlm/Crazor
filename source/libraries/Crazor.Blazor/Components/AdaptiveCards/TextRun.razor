@using global::AdaptiveCards
@using Microsoft.AspNetCore.Components;
@using System.ComponentModel;
@inherits ItemComponent<AdaptiveTextRun>

<ac:TextRun @attributes="@GetAttributes()">
    <CascadingValue Name="ParentModel" Value="@Model">@ChildContent</CascadingValue>
</ac:TextRun>

@code
{

    [Parameter]
    [DefaultValue(typeof(AdaptiveTextColor), "Default")]
    public AdaptiveTextColor Color { get => Model.Color; set => Model.Color = value; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveFontType), "Default")]
    public AdaptiveFontType FontType { get => Model.FontType; set => Model.FontType = value; }

    [Parameter]
    public Boolean? Highlight { get => Model.Highlight; set => Model.Highlight = value ?? false; }

    [Parameter]
    public Boolean? IsSubtle { get => Model.IsSubtle; set => Model.IsSubtle = value ?? false; }

    [Parameter]
    public Boolean? Italic { get => Model.Italic; set => Model.Italic = value ?? false; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveTextSize), "Default")]
    public AdaptiveTextSize Size { get => Model.Size; set => Model.Size = value; }

    [Parameter]
    public Boolean? Strikethrough { get => Model.Strikethrough; set => Model.Strikethrough = value ?? false; }

    [Parameter]
    public Boolean? Underline { get => Model.Underline; set => Model.Underline = value ?? false; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveTextWeight), "Normal")]
    public AdaptiveTextWeight Weight { get => Model.Weight; set => Model.Weight = value; }


    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (this.ParentModel is AdaptiveRichTextBlock rtb)
        {
            rtb.Inlines.Add(Model);
        }
        else
        {
            throw new Exception("Unknown parent type");
        }
    }
}
