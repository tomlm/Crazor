@using global::AdaptiveCards;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Rendering;
@using System.ComponentModel;
@inherits TypedElementComponent<AdaptiveCard>

<ac:Card xmlns="@AdaptiveCard.ContentType" xmlns:ac="@AdaptiveCard.ContentType" @attributes="@GetAttributes()">
    <CascadingValue Name="ParentModel" Value="@Model">
        @ChildContent
    </CascadingValue>
</ac:Card>

@code {
    [Parameter]
    public String FallbackText { get => Model.FallbackText; set => Model.FallbackText = value; }

    [Parameter]
    public String Lang { get => Model.Lang; set => Model.Lang = value; }

    [Parameter]
    public String MinHeight { get => Model.MinHeight; set => Model.MinHeight = value; }

    [Parameter]
    public Boolean? Rtl { get => Model.Rtl; set => Model.Rtl = value ?? false; }

    [Parameter]
    public String Speak { get => Model.Speak; set => Model.Speak = value; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveContainerStyle), "Default")]
    public AdaptiveContainerStyle Style { get => Model.Style; set => Model.Style = value; }

    [Parameter]
    public String Title { get => Model.Title; set => Model.Title = value; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveVerticalContentAlignment), "Top")]
    public AdaptiveVerticalContentAlignment VerticalContentAlignment { get => Model.VerticalContentAlignment; set => Model.VerticalContentAlignment = value; }

    [Parameter]
    public String Height { get => Model.Height?.ToString(); set => Model.Height = value; }

    [Parameter]
    public String Version { get => Model.Version.ToString(); set => Model.Version = new AdaptiveSchemaVersion(value); }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (ParentModel is AdaptiveShowCardAction action)
        {
            action.Card = Model;
        }
    }
    }
