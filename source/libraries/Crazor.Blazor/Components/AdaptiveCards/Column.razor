@using global::AdaptiveCards
@using Microsoft.AspNetCore.Components;
@using System.ComponentModel;
@inherits TypedElementComponent<AdaptiveColumn>

<ac:Column @attributes="@GetAttributes()">
    <CascadingValue Name="ParentItem" Value="@Item">@ChildContent</CascadingValue>
</ac:Column>

@code
{
    [Parameter]
    public Boolean? Bleed { get => Item.Bleed; set => Item.Bleed = value ?? false; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveHorizontalAlignment), "Left")]
    public AdaptiveHorizontalAlignment HorizontalAlignment { get => Item.HorizontalAlignment; set => Item.HorizontalAlignment = value; }

    [Parameter]
    public Boolean? IsVisible { get => Item.IsVisible; set => Item.IsVisible = value ?? true; }

    [Parameter]
    public String MinHeight { get => Item.MinHeight; set => Item.MinHeight = value; }

    [Parameter]
    public Boolean? Rtl { get => Item.Rtl; set => Item.Rtl = value ?? false; }

    [Parameter]
    public Boolean? Separator { get => Item.Separator; set => Item.Separator = value ?? false; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveSpacing), "Default")]
    public AdaptiveSpacing Spacing { get => Item.Spacing; set => Item.Spacing = value; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveContainerStyle), "Default")]
    public AdaptiveContainerStyle Style { get => Item.Style; set => Item.Style = value; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveVerticalContentAlignment), "Top")]
    public AdaptiveVerticalContentAlignment VerticalContentAlignment { get => Item.VerticalContentAlignment; set => Item.VerticalContentAlignment = value; }

    [Parameter]
    public String Height { get => Item.Height?.ToString(); set => Item.Height = value; }

    [Parameter]
    public String Width { get => Item.Width?.ToString(); set => Item.Width = value; }

}
