@using global::AdaptiveCards
@using Microsoft.AspNetCore.Components;
@using System.ComponentModel;
@inherits TypedElementComponent<AdaptiveColumn>

<ac:Column @attributes="@GetAttributes()">
    <CascadingValue Name="ParentModel" Value="@Model">@ChildContent</CascadingValue>
</ac:Column>

@code
{
    [Parameter]
    public Boolean? Bleed { get => Model.Bleed; set => Model.Bleed = value ?? false; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveHorizontalAlignment), "Left")]
    public AdaptiveHorizontalAlignment HorizontalAlignment { get => Model.HorizontalAlignment; set => Model.HorizontalAlignment = value; }

    [Parameter]
    public Boolean? IsVisible { get => Model.IsVisible; set => Model.IsVisible = value ?? true; }

    [Parameter]
    public String MinHeight { get => Model.MinHeight; set => Model.MinHeight = value; }

    [Parameter]
    public Boolean? Rtl { get => Model.Rtl; set => Model.Rtl = value ?? false; }

    [Parameter]
    public Boolean? Separator { get => Model.Separator; set => Model.Separator = value ?? false; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveSpacing), "Default")]
    public AdaptiveSpacing Spacing { get => Model.Spacing; set => Model.Spacing = value; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveContainerStyle), "Default")]
    public AdaptiveContainerStyle Style { get => Model.Style; set => Model.Style = value; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveVerticalContentAlignment), "Top")]
    public AdaptiveVerticalContentAlignment VerticalContentAlignment { get => Model.VerticalContentAlignment; set => Model.VerticalContentAlignment = value; }

    [Parameter]
    public String Height { get => Model.Height?.ToString(); set => Model.Height = value; }

    [Parameter]
    public String Width { get => Model.Width?.ToString(); set => Model.Width = value; }

}
