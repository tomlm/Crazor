@using global::AdaptiveCards
@using Crazor.Attributes;
@using Microsoft.AspNetCore.Components;
@using System.ComponentModel;
@using System.ComponentModel.DataAnnotations;
@using System.Reflection;
@inherits Input<AdaptiveTimeInput>

<ac:Input.Time @attributes="@GetAttributes()">
    <CascadingValue Name="ParentItem" Value="@Item">@ChildContent</CascadingValue>
</ac:Input.Time>
@if (ShowErrors == null || ShowErrors == true)
{
    <ValidationErrors Id="@(Binding ?? Id)" />
}

@code
{
    internal const string Format = "HH:mm";

    [Parameter]
    public BoolProperty? IsVisible { get; set; }

    [Parameter]
    public DateTime? Min { get; set; }

    [Parameter]
    public DateTime? Max { get; set; }

    [Parameter]
    public String? Placeholder { get; set; }

    [Parameter]
    [DefaultValue(false)]
    public BoolProperty? Separator { get; set; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveSpacing), "Default")]
    public AdaptiveSpacing Spacing { get; set; }

    [Parameter]
    [Binding(BindingType.Value)]
    public DateTime? Value { get; set; }

    [Parameter]
    public String? Height { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        // if we don't have required, but binding property has [Required] then set it
        var rangeAttribute = BindingProperty?.GetCustomAttribute<RangeAttribute>();
        if (this.Min == null && rangeAttribute?.Minimum != null)
        {
            this.Min = DateTime.Parse((string)rangeAttribute.Minimum);
        }

        if (this.Max == null && rangeAttribute?.Maximum != null)
        {
            this.Max = DateTime.Parse((string)rangeAttribute.Maximum);
        }

        if (this.ErrorMessage == null && rangeAttribute?.ErrorMessage != null)
        {
            this.ErrorMessage = rangeAttribute?.ErrorMessage;
        }
    }

    protected override Dictionary<string, object> GetAttributes()
    {
        var attributes = new Dictionary<string, object>();
        foreach (var property in this.GetType().GetProperties().Where(p => p.PropertyType != typeof(RenderFragment) && p.GetCustomAttribute<ParameterAttribute>() != null))
        {
            var val = property.GetValue(this);
            var targetProperty = Item!.GetType().GetProperty(property.Name) ?? property;
            var defValue = (targetProperty.PropertyType.IsValueType) ? Activator.CreateInstance(targetProperty.PropertyType) : null;
            if (val != null && !Object.Equals(val, defValue))
            {
                if (val is bool b)
                    // HTML serialization used by Blazor will turn raw bool into just attribute name with no value
                    // we are targeting XML which always must have a value, and bool is represented as string "true"|"false"
                    attributes.Add(property.Name, b.ToString().ToLower());
                else if (val is DateTime dt)
                    attributes.Add(property.Name, dt.ToString(Format));
                else
                    attributes.Add(property.Name, val);
            }
        }
        return attributes;
    }

}
