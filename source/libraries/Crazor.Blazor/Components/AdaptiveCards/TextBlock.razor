@using Microsoft.AspNetCore.Components;
@using System.ComponentModel;
@using global::AdaptiveCards;
@inherits ElementComponent<AdaptiveTextBlock>

<ac:TextBlock @attributes="@GetAttributes()">
    <CascadingValue Name="ParentModel" Value="@Model">@ChildContent</CascadingValue>
</ac:TextBlock>

@code
{
    [Parameter]
    [DefaultValue(typeof(AdaptiveTextColor), "Default")]
    public AdaptiveTextColor Color { get => Model.Color; set => Model.Color = value; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveFontType), "Default")]
    public AdaptiveFontType FontType { get => Model.FontType; set => Model.FontType = value; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveHorizontalAlignment), "Left")]
    public AdaptiveHorizontalAlignment HorizontalAlignment { get => Model.HorizontalAlignment; set => Model.HorizontalAlignment = value; }

    [Parameter]
    public Boolean? IsSubtle { get => Model.IsSubtle; set => Model.IsSubtle = value ?? false; }

    [Parameter]
    public Boolean? IsVisible { get => Model.IsVisible; set => Model.IsVisible = value ?? true; }

    [Parameter]
    public Int32? MaxLines { get => Model.MaxLines; set => Model.MaxLines = value ?? 0; }

    [Parameter]
    public Int32? MaxWidth { get => Model.MaxWidth; set => Model.MaxWidth = value ?? 0; }

    [Parameter]
    [DefaultValue(false)]
    public Boolean? Separator { get => Model.Separator; set => Model.Separator = value ?? false; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveTextSize), "Default")]
    public AdaptiveTextSize Size { get => Model.Size; set => Model.Size = value; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveSpacing), "Default")]
    public AdaptiveSpacing Spacing { get => Model.Spacing; set => Model.Spacing = value; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveTextBlockStyle), "Default")]
    public AdaptiveTextBlockStyle Style { get => Model.Style; set => Model.Style = value; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveTextWeight), "Normal")]
    public AdaptiveTextWeight Weight { get => Model.Weight; set => Model.Weight = value; }

    [Parameter]
    public Boolean? Wrap { get => Model.Wrap; set => Model.Wrap = value ?? false; }

    [Parameter]
    public String Height { get => Model.Height?.ToString(); set => Model.Height = value; }
}
