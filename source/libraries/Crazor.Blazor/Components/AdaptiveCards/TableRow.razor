@using global::AdaptiveCards
@using Microsoft.AspNetCore.Components;
@using System.ComponentModel;
@inherits ItemComponent<AdaptiveTableRow>

<ac:TableRow @attributes="@GetAttributes()">
    <CascadingValue Name="ParentItem" Value="@Item">@ChildContent</CascadingValue>
</ac:TableRow>


@code
{
    [Parameter]
    [DefaultValue(typeof(AdaptiveHorizontalAlignment), "Left")]
    public AdaptiveHorizontalAlignment HorizontalAlignment { get => Item.HorizontalAlignment; set => Item.HorizontalAlignment = value; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveHorizontalAlignment), "Left")]
    public AdaptiveHorizontalAlignment HorizontalCellContentAlignment { get => Item.HorizontalCellContentAlignment; set => Item.HorizontalCellContentAlignment = value; }

    [Parameter]
    public Boolean? IsVisible { get => Item.IsVisible; set => Item.IsVisible = value ?? true; }

    [Parameter]
    public Boolean? Separator { get => Item.Separator; set => Item.Separator = value ?? false; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveSpacing), "Default")]
    public AdaptiveSpacing Spacing { get => Item.Spacing; set => Item.Spacing = value; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveContainerStyle), "Default")]
    public AdaptiveContainerStyle Style { get => Item.Style; set => Item.Style = value; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveVerticalAlignment), "Top")]
    public AdaptiveVerticalAlignment VerticalCellContentAlignment { get => Item.VerticalCellContentAlignment; set => Item.VerticalCellContentAlignment = value; }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (this.ParentItem is AdaptiveTable table)
        {
            table.Rows.Add(Item);
        }
    }
}
