@using global::AdaptiveCards
@using Crazor.Attributes;
@using Microsoft.AspNetCore.Components;
@using System.ComponentModel;
@using System.ComponentModel.DataAnnotations;
@using System.Reflection;
@inherits Input<AdaptiveTextInput>

<ac:Input.Text @attributes="@GetAttributes()">
    <CascadingValue Name="ParentModel" Value="@Model">@ChildContent</CascadingValue>
</ac:Input.Text>

@code
{

    [Parameter]
    public Boolean? IsMultiline { get => Model.IsMultiline; set => Model.IsMultiline = value ?? false; }

    [Parameter]
    public Boolean? IsVisible { get => Model.IsVisible; set => Model.IsVisible = value ?? true; }

    [Parameter]
    public Int32? MaxLength { get => Model.MaxLength; set => Model.MaxLength = value ?? 0; }

    [Parameter]
    public String Placeholder { get => Model.Placeholder; set => Model.Placeholder = value; }

    [Parameter]
    public String Regex { get => Model.Regex; set => Model.Regex = value; }

    [Parameter]
    public Boolean? Separator { get => Model.Separator; set => Model.Separator = value ?? false; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveSpacing), "Default")]
    public AdaptiveSpacing Spacing { get => Model.Spacing; set => Model.Spacing = value; }

    [Parameter]
    [DefaultValue(typeof(AdaptiveTextInputStyle), "Text")]
    public AdaptiveTextInputStyle? Style { get => Model.Style == AdaptiveTextInputStyle.Text ? null : Model.Style; set => Model.Style = value ?? AdaptiveTextInputStyle.Text; }

    [Parameter]
    [Binding(BindingType.Value)]
    public String Value { get => Model.Value; set => Model.Value = value; }

    [Parameter]
    public String Height { get => Model._Height; set => Model.Height = value; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        // --- Client side validation....
        var regexAttribute = BindingProperty?.GetCustomAttribute<RegularExpressionAttribute>();
        if (this.Regex == null && regexAttribute?.Pattern != null)
        {
            this.Regex = regexAttribute?.Pattern;

        }

        if (this.ErrorMessage == null && regexAttribute?.ErrorMessage != null)
        {
            this.ErrorMessage = regexAttribute?.ErrorMessage;
        }

        // -- MaxLength
        var stringLengthAttribute = BindingProperty?.GetCustomAttribute<StringLengthAttribute>();
        if (this.MaxLength == null && stringLengthAttribute != null)
        {
            this.MaxLength = stringLengthAttribute?.MaximumLength;
        }

        // ----  style
        var maxLengthAttribute = BindingProperty?.GetCustomAttribute<MaxLengthAttribute>();
        if (this.MaxLength == null && maxLengthAttribute != null)
        {
            this.MaxLength = maxLengthAttribute?.Length;
        }

        var phoneAttribute = BindingProperty?.GetCustomAttribute<PhoneAttribute>();
        if (this.Style == null && phoneAttribute != null)
        {
            this.Style = AdaptiveTextInputStyle.Tel;
        }

        var emailAttribute = BindingProperty?.GetCustomAttribute<EmailAddressAttribute>();
        if (this.Style == null && emailAttribute != null)
        {
            this.Style = AdaptiveTextInputStyle.Email;
        }

        var passwordAttribute = BindingProperty?.GetCustomAttribute<PasswordPropertyTextAttribute>();
        if (this.Style == null && passwordAttribute != null)
        {
            this.Style = AdaptiveTextInputStyle.Password;
        }

        var urlAttribute = BindingProperty?.GetCustomAttribute<UrlAttribute>();
        if (this.Style == null && urlAttribute != null)
        {
            this.Style = AdaptiveTextInputStyle.Url;
        }

        var dtAttribute = BindingProperty?.GetCustomAttribute<DataTypeAttribute>();
        if (this.Style == null && dtAttribute != null)
        {
            switch (dtAttribute.DataType)
            {
                case DataType.Text:
                    this.Style = AdaptiveTextInputStyle.Text;
                    break;
                case DataType.EmailAddress:
                    this.Style = AdaptiveTextInputStyle.Email;
                    break;
                case DataType.PhoneNumber:
                    this.Style = AdaptiveTextInputStyle.Tel;
                    break;
                case DataType.Password:
                    this.Style = AdaptiveTextInputStyle.Password;
                    break;
                case DataType.Url:
                    this.Style = AdaptiveTextInputStyle.Url;
                    break;
                case DataType.Date:
                case DataType.DateTime:
                case DataType.Time:
                case DataType.CreditCard:
                case DataType.Currency:
                case DataType.PostalCode:
                    break;
            }
        }
    }
}
