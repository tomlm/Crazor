@using AdaptiveCards;
@using Crazor.Controllers;
@using Microsoft.Bot.Schema;
@using Microsoft.Extensions.Configuration;
@using Microsoft.JSInterop;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@inject IJSRuntime JS
@inject IConfiguration Configuration;
@inject CardAppFactory CardAppFactory;
@implements IDisposable

<div id='@CardId' class="cardDiv">
    <div style="visibility:collapse">
        <!-- hack attempt to make it clear something has changed....?-->
        @JsonConvert.SerializeObject(Card)
    </div>
</div>

@code {
    public string CardId { get; set; } = $"card{Utils.GetNewId()}";

    private string BotUrl;

    private string ChannelId;

    private DotNetObjectReference<CardViewer> DotNetObjectRef { get; set; }

    private CardApp CardApp { get; set; }

    private CardRoute CardRoute { get; set; }

    private AdaptiveCard Card { get; set; } = new AdaptiveCard(new AdaptiveSchemaVersion(1, 5));

    [Parameter]
    public string Route { get; set; }

    public void Dispose() => DotNetObjectRef?.Dispose();

    protected override async Task OnInitializedAsync()
    {
        this.DotNetObjectRef = DotNetObjectReference.Create(this);
        this.BotUrl = Configuration.GetValue<string>("BotUri") ?? new Uri(Configuration.GetValue<Uri>("HostUri"), "/api/cardapps").AbsoluteUri;
        this.ChannelId = Configuration.GetValue<Uri>("HostUri").Host;
        this.CardRoute = CardRoute.Parse(Route);
        this.CardApp = CardAppFactory.Create(CardRoute);

        var activity = new Activity(ActivityTypes.Invoke)
        {
            ServiceUrl = "https://about",
            ChannelId = this.ChannelId,
            Id = Guid.NewGuid().ToString("n"),
            From = new ChannelAccount() { Id = String.Empty },
            Recipient = new ChannelAccount() { Id = "bot" },
            Conversation = new ConversationAccount() { Id = Utils.GetNewId() },
            Timestamp = DateTimeOffset.UtcNow,
            LocalTimestamp = DateTimeOffset.Now,
        }
        .CreateLoadRouteActivity(CardRoute.Route);

        this.Card = await this.CardApp.ProcessInvokeActivity(activity, isPreview: false, default);
        this.Route = this.CardApp.GetCurrentCardRoute();

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("renderCrazorCard", CardId, ChannelId, BotUrl, Route, CardRoute.SessionId, this.DotNetObjectRef, JsonConvert.SerializeObject(this.Card));
        await base.OnAfterRenderAsync(firstRender);
    }

    [JSInvokable]
    public async Task onExecuteAction(object actionIn)
    {
        var action = JsonConvert.DeserializeObject<AdaptiveCardInvokeAction>(actionIn.ToString()!);

        var activity = new Activity(ActivityTypes.Invoke)
        {
            ServiceUrl = "https://about",
            ChannelId = this.ChannelId,
            Id = Guid.NewGuid().ToString("n"),
            From = new ChannelAccount() { Id = String.Empty },
            Recipient = new ChannelAccount() { Id = "bot" },
            Conversation = new ConversationAccount() { Id = CardRoute.SessionId },
            Timestamp = DateTimeOffset.UtcNow,
            LocalTimestamp = DateTimeOffset.Now,
        }
        .CreateActionInvokeActivity(action.Verb, JObject.FromObject(action.Data));

        this.Card = await this.CardApp.ProcessInvokeActivity(activity, isPreview: false, default);

        StateHasChanged();
    }
}
